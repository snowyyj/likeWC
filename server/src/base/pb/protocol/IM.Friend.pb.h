// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Friend.proto

#ifndef PROTOBUF_IM_2eFriend_2eproto__INCLUDED
#define PROTOBUF_IM_2eFriend_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "IM.BaseDefine.pb.h"
// @@protoc_insertion_point(includes)

namespace IM {
namespace Friend {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_IM_2eFriend_2eproto();
void protobuf_AssignDesc_IM_2eFriend_2eproto();
void protobuf_ShutdownFile_IM_2eFriend_2eproto();

class IMGetUserInfoReq;
class IMMakeFriendReq;

// ===================================================================

class IMGetUserInfoReq : public ::google::protobuf::MessageLite {
 public:
  IMGetUserInfoReq();
  virtual ~IMGetUserInfoReq();

  IMGetUserInfoReq(const IMGetUserInfoReq& from);

  inline IMGetUserInfoReq& operator=(const IMGetUserInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGetUserInfoReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGetUserInfoReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGetUserInfoReq* other);

  // implements Message ----------------------------------------------

  IMGetUserInfoReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGetUserInfoReq& from);
  void MergeFrom(const IMGetUserInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string nick_name = 1;
  inline bool has_nick_name() const;
  inline void clear_nick_name();
  static const int kNickNameFieldNumber = 1;
  inline const ::std::string& nick_name() const;
  inline void set_nick_name(const ::std::string& value);
  inline void set_nick_name(const char* value);
  inline void set_nick_name(const char* value, size_t size);
  inline ::std::string* mutable_nick_name();
  inline ::std::string* release_nick_name();
  inline void set_allocated_nick_name(::std::string* nick_name);

  // @@protoc_insertion_point(class_scope:IM.Friend.IMGetUserInfoReq)
 private:
  inline void set_has_nick_name();
  inline void clear_has_nick_name();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* nick_name_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eFriend_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eFriend_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eFriend_2eproto();
  friend void protobuf_ShutdownFile_IM_2eFriend_2eproto();

  void InitAsDefaultInstance();
  static IMGetUserInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class IMMakeFriendReq : public ::google::protobuf::MessageLite {
 public:
  IMMakeFriendReq();
  virtual ~IMMakeFriendReq();

  IMMakeFriendReq(const IMMakeFriendReq& from);

  inline IMMakeFriendReq& operator=(const IMMakeFriendReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMMakeFriendReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMMakeFriendReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMMakeFriendReq* other);

  // implements Message ----------------------------------------------

  IMMakeFriendReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMMakeFriendReq& from);
  void MergeFrom(const IMMakeFriendReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_account = 1;
  inline bool has_user_account() const;
  inline void clear_user_account();
  static const int kUserAccountFieldNumber = 1;
  inline ::google::protobuf::uint32 user_account() const;
  inline void set_user_account(::google::protobuf::uint32 value);

  // required string attach_msg = 2;
  inline bool has_attach_msg() const;
  inline void clear_attach_msg();
  static const int kAttachMsgFieldNumber = 2;
  inline const ::std::string& attach_msg() const;
  inline void set_attach_msg(const ::std::string& value);
  inline void set_attach_msg(const char* value);
  inline void set_attach_msg(const char* value, size_t size);
  inline ::std::string* mutable_attach_msg();
  inline ::std::string* release_attach_msg();
  inline void set_allocated_attach_msg(::std::string* attach_msg);

  // required .IM.BaseDefine.FriendPermission friend_permission = 3;
  inline bool has_friend_permission() const;
  inline void clear_friend_permission();
  static const int kFriendPermissionFieldNumber = 3;
  inline ::IM::BaseDefine::FriendPermission friend_permission() const;
  inline void set_friend_permission(::IM::BaseDefine::FriendPermission value);

  // @@protoc_insertion_point(class_scope:IM.Friend.IMMakeFriendReq)
 private:
  inline void set_has_user_account();
  inline void clear_has_user_account();
  inline void set_has_attach_msg();
  inline void clear_has_attach_msg();
  inline void set_has_friend_permission();
  inline void clear_has_friend_permission();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* attach_msg_;
  ::google::protobuf::uint32 user_account_;
  int friend_permission_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eFriend_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eFriend_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eFriend_2eproto();
  friend void protobuf_ShutdownFile_IM_2eFriend_2eproto();

  void InitAsDefaultInstance();
  static IMMakeFriendReq* default_instance_;
};
// ===================================================================


// ===================================================================

// IMGetUserInfoReq

// required string nick_name = 1;
inline bool IMGetUserInfoReq::has_nick_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGetUserInfoReq::set_has_nick_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGetUserInfoReq::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGetUserInfoReq::clear_nick_name() {
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_->clear();
  }
  clear_has_nick_name();
}
inline const ::std::string& IMGetUserInfoReq::nick_name() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMGetUserInfoReq.nick_name)
  return *nick_name_;
}
inline void IMGetUserInfoReq::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Friend.IMGetUserInfoReq.nick_name)
}
inline void IMGetUserInfoReq::set_nick_name(const char* value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Friend.IMGetUserInfoReq.nick_name)
}
inline void IMGetUserInfoReq::set_nick_name(const char* value, size_t size) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Friend.IMGetUserInfoReq.nick_name)
}
inline ::std::string* IMGetUserInfoReq::mutable_nick_name() {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMGetUserInfoReq.nick_name)
  return nick_name_;
}
inline ::std::string* IMGetUserInfoReq::release_nick_name() {
  clear_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nick_name_;
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGetUserInfoReq::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_name_;
  }
  if (nick_name) {
    set_has_nick_name();
    nick_name_ = nick_name;
  } else {
    clear_has_nick_name();
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Friend.IMGetUserInfoReq.nick_name)
}

// -------------------------------------------------------------------

// IMMakeFriendReq

// required uint32 user_account = 1;
inline bool IMMakeFriendReq::has_user_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMMakeFriendReq::set_has_user_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMMakeFriendReq::clear_has_user_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMMakeFriendReq::clear_user_account() {
  user_account_ = 0u;
  clear_has_user_account();
}
inline ::google::protobuf::uint32 IMMakeFriendReq::user_account() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMMakeFriendReq.user_account)
  return user_account_;
}
inline void IMMakeFriendReq::set_user_account(::google::protobuf::uint32 value) {
  set_has_user_account();
  user_account_ = value;
  // @@protoc_insertion_point(field_set:IM.Friend.IMMakeFriendReq.user_account)
}

// required string attach_msg = 2;
inline bool IMMakeFriendReq::has_attach_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMMakeFriendReq::set_has_attach_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMMakeFriendReq::clear_has_attach_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMMakeFriendReq::clear_attach_msg() {
  if (attach_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_msg_->clear();
  }
  clear_has_attach_msg();
}
inline const ::std::string& IMMakeFriendReq::attach_msg() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMMakeFriendReq.attach_msg)
  return *attach_msg_;
}
inline void IMMakeFriendReq::set_attach_msg(const ::std::string& value) {
  set_has_attach_msg();
  if (attach_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_msg_ = new ::std::string;
  }
  attach_msg_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Friend.IMMakeFriendReq.attach_msg)
}
inline void IMMakeFriendReq::set_attach_msg(const char* value) {
  set_has_attach_msg();
  if (attach_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_msg_ = new ::std::string;
  }
  attach_msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Friend.IMMakeFriendReq.attach_msg)
}
inline void IMMakeFriendReq::set_attach_msg(const char* value, size_t size) {
  set_has_attach_msg();
  if (attach_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_msg_ = new ::std::string;
  }
  attach_msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Friend.IMMakeFriendReq.attach_msg)
}
inline ::std::string* IMMakeFriendReq::mutable_attach_msg() {
  set_has_attach_msg();
  if (attach_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMMakeFriendReq.attach_msg)
  return attach_msg_;
}
inline ::std::string* IMMakeFriendReq::release_attach_msg() {
  clear_has_attach_msg();
  if (attach_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_msg_;
    attach_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMMakeFriendReq::set_allocated_attach_msg(::std::string* attach_msg) {
  if (attach_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_msg_;
  }
  if (attach_msg) {
    set_has_attach_msg();
    attach_msg_ = attach_msg;
  } else {
    clear_has_attach_msg();
    attach_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Friend.IMMakeFriendReq.attach_msg)
}

// required .IM.BaseDefine.FriendPermission friend_permission = 3;
inline bool IMMakeFriendReq::has_friend_permission() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMMakeFriendReq::set_has_friend_permission() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMMakeFriendReq::clear_has_friend_permission() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMMakeFriendReq::clear_friend_permission() {
  friend_permission_ = 1;
  clear_has_friend_permission();
}
inline ::IM::BaseDefine::FriendPermission IMMakeFriendReq::friend_permission() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMMakeFriendReq.friend_permission)
  return static_cast< ::IM::BaseDefine::FriendPermission >(friend_permission_);
}
inline void IMMakeFriendReq::set_friend_permission(::IM::BaseDefine::FriendPermission value) {
  assert(::IM::BaseDefine::FriendPermission_IsValid(value));
  set_has_friend_permission();
  friend_permission_ = value;
  // @@protoc_insertion_point(field_set:IM.Friend.IMMakeFriendReq.friend_permission)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Friend
}  // namespace IM

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_IM_2eFriend_2eproto__INCLUDED
